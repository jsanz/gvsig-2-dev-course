/* gvSIG. Desktop Geographic Information System.
 *
 * Copyright © 2007-2012 gvSIG Association
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 *
 * For any additional information, do not hesitate to contact us
 * at info AT gvsig.com, or visit our website www.gvsig.com.
 */
package org.gvsig.visor.swing.impl;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.border.Border;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.gvsig.tools.swing.api.ToolsSwingLocator;
import org.gvsig.visor.VisorBlock;
import org.gvsig.visor.VisorProperty;
import org.gvsig.visor.swing.VisorBlockPanel;
import org.gvsig.visor.swing.VisorSwingManager;

/**
 * Default implementation of a panel for blocks
 * 
 * @author jsanz
 * 
 */
public class DefaultVisorBlockPanel extends JPanel implements VisorBlockPanel {

    private VisorBlock block;
    private VisorSwingManager uiManager;

    /**
     * The constructor builds all the panel components on an easy border layout
     * 
     * @param block
     * @param uiManager
     */
    public DefaultVisorBlockPanel(VisorBlock block, VisorSwingManager uiManager) {
        super();
        this.block = block;
        this.uiManager = uiManager;

        // Create the components
        JLabel label;
        JScrollPane scroll;
        final JButton button;

        // Set the font
        Font font = new Font("Sans Serif", Font.PLAIN, 12);

        // Create the label and scrollpane
        label = new JLabel(this.getText());
        label.setFont(font);
        scroll = new JScrollPane(label);

        // Get the button from the usability swing manager of gvSIG
        button =
            ToolsSwingLocator.getUsabilitySwingManager().createJButton(
                uiManager.getTranslation("close"));
        // Add a close logic to the button
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent arg0) {
                JRootPane pane = button.getRootPane();
                if (pane != null) {
                    JFrame frame = (JFrame) pane.getParent();
                    frame.dispose();
                }
            }
        });

        // Do the layout
        this.setLayout(new BorderLayout(5, 5));
        this.add(scroll, BorderLayout.CENTER);
        this.add(button, BorderLayout.PAGE_END);

        // I've never understood how this works, seems that only preferredsize
        // is working at all
        // scroll.setMinimumSize(new Dimension(250, 200));
        scroll.setPreferredSize(new Dimension(250, 400));
        // scroll.setMaximumSize(new Dimension(250, 600));
        
        Border border = BorderFactory.createEmptyBorder(5, 5, 5, 5);

        this.setBorder(border);
        // scroll.setBorder(border);
        label.setBorder(border);
    }

    static Logger LOG = LoggerFactory.getLogger(DefaultVisorBlockPanel.class);

    /**
     * Autogenerated ID
     */
    private static final long serialVersionUID = -1041617976423323724L;

    /*
     * (non-Javadoc)
     * 
     * @see org.gvsig.visor.swing.VisorPanel#getComponent()
     */
    public JComponent getComponent() {
        return this;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.gvsig.visor.swing.VisorBlockPanel#getVisorBlock()
     */
    public VisorBlock getVisorBlock() {
        return block;
    }

    private String getText() {
        NumberFormat format = new DecimalFormat("#.#");

        // the final string
        String result = "";

        // A string buffer to add texts, starting with a paragraph tag
        StringBuffer sb = new StringBuffer();
        sb.append("<HTML>");
        try {
            String tmp = "";
            // add to a temporal string the data of the block and its shape
            tmp +=
                "<P><B><FONT COLOR=RED>Block: " + block.getCode()
                    + "</FONT></B>";
            tmp +=
                "<P><B>Area:</B> "
                    + format.format(block.getShape().area()) + " m2";
            tmp +=
                "<P><B>Perimeter:</B> "
                    + format.format(block.getShape().perimeter()) + " m";
            tmp +=
                "<P><B>Number of properties:</B> "
                    + block.getProperties().size();
            // add to the string buffer the first chunk of data
            sb.append(tmp);

            tmp = "<UL>";
            List<VisorProperty> props = block.getProperties();

            Iterator<VisorProperty> it = props.iterator();
            while (it.hasNext()) {
                VisorProperty prop = it.next();
                tmp += "<LI><B>Property:</B> " + prop.getCode();
                tmp +=
                    "<ul><LI><B>Date:</B> "
                        + splitDate(prop.getCreationDate());
                tmp +=
                    "</LI><LI><B>Area:</B> "
                        + format.format(prop.getShape().area()) + " m2";
                tmp +=
                    "</LI><LI><B>Perimeter:</B> "
                        + format.format(prop.getShape().perimeter()) + " m";
                tmp += "</UL></LI>";
            }
            tmp += "</UL>";
            sb.append(tmp);
        } catch (Exception e) {
            // add to the string buffer the cause of the exception
            sb.append(e.getCause());
            LOG.error("Error formating the text of the block", e);
        } finally {
            // close the tag and extract the string
            sb.append("</HTML>");
            result = sb.toString();
        }
        return result;
    }

    private String splitDate(Integer iDate) {
        String date = iDate.toString();
        String result =
            date.substring(6, 8) + "/" + date.substring(4, 6) + "/"
                + date.substring(0, 4);

        return result;
    }
}
